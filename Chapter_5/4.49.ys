.pos 0
main:
    irmovq stack, %rsp
    
    irmovq array, %rdi     // data
    irmovq $6, %rsi     // count
    call bubble_p
    halt

.align 8
array:
    .quad 0x05
    .quad 0x04
    .quad 0x03
    .quad 0x02
    .quad 0x01
    .quad 0x01
    
bubble_p:
    irmovq $1, %r11     // constant 1
    irmovq $8, %r8      // constant 8
    
    subq %r11, %rsi 
    jl end
    rrmovq %rdi, %r12   // data
	
outerloop:
    irmovq $0, %r10     // i * 8
    irmovq $0, %r12     // i
	
innerloop:
    rrmovq %rdi, %rax
    addq %r10, %rax     // data + i
    rrmovq %rax, %rcx
    addq %r8, %rcx      // data + i + 1
    
    mrmovq (%rax), %rdx // *(data + i)
    mrmovq (%rcx), %rbx // *(data + i + 1)
    
    rrmovq %rbx, %r14   
    rrmovq %r14, %r13
    subq %rdx, %r14    
    
    irmovq $0, %r9
    cmovl %r8, %r9
    
    rrmovq %rax, %rcx
    addq %r9, %rcx      // data + i + (1 or 0, depending on cmov)
    mrmovq (%rcx), %rbx

    // Swap
    rmmovq %rdx, (%rcx)
    rmmovq %rbx, (%rax)
    
skip:   
    addq %r11, %r12
    addq %r8, %r10      // i++
innertest:
    rrmovq %r12, %r13   // temp for test
    subq %rsi, %r13
    jl innerloop
    subq %r11, %rsi  // last--
outertest:
    jg outerloop
end:
    ret


    .pos 0x200
stack:
   